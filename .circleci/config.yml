# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
defaults: &defaults
  docker:
    - image: drupaldocker/php:7.1-cli
  working_directory: ~/example_wordpress_composer
  environment:
    BASH_ENV: ~/.bashrc
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    # In addition to the environment variables defined in this file, also
    # add the following variables in the Circle CI UI.
    #
    # See: https://circleci.com/docs/1.0/environment-variables/
    #
    # TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
    # TERMINUS_TOKEN: The Pantheon machine token
    # GITHUB_TOKEN:   The GitHub personal access token
    # GIT_EMAIL:      The email address to use when making commits
    #
    # TEST_SITE_NAME: The name of the test site to provide when installing.
    # ADMIN_PASSWORD: The admin password to use when installing.
    # ADMIN_EMAIL:    The email address to give the admin when installing.
    #
    # The variables below usually do not need to be modified.
    BRANCH: $(echo $CIRCLE_BRANCH | grep -v '^\(master\|[0-9]\+.x\)$')
    PR_ENV: ${BRANCH:+pr-$BRANCH}
    CIRCLE_ENV: ci-$CIRCLE_BUILD_NUM
    DEFAULT_ENV: $(echo ${PR_ENV:-$CIRCLE_ENV} | tr '[:upper:]' '[:lower:]' | sed 's/[^0-9a-z-]//g' | cut -c -11 | sed 's/-$//')
    TERMINUS_ENV: ${TERMINUS_ENV:-$DEFAULT_ENV}
    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}'
    #PATH: $PATH:~/bin:tests/scripts
    ADMIN_USERNAME: admin
    BUILD_TOOLS_VERSION: ^1
    TERM: dumb

version: 2
jobs:
    # @todo: common initialization, maybe
    build:
        <<: *defaults
        steps:
            - checkout
            - run:
                name: dependencies
                command: ./.circleci/set-up-globals.sh
            - run:
                name: build assets
                command: ./.circleci/build-assets.sh

            - run:
                name: create workspace directory
                command: mkdir -p workspace
            
            - run:
                name: move vendor to workspace
                command: mv ./vendor ./workspace/vendor
            
            - run:
                name: move web to workspace
                command: mv ./web ./workspace/web
                

            - persist_to_workspace:
                # Must be relative path from working_directory
                root: workspace
                # Must be relative path from root
                paths:
                    - vendor
                    - web

    code_sniff:
        <<: *defaults
        steps:
            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp/workspace

            - checkout

            - run:
                name: copy vendor
                command: cp -r /tmp/workspace/vendor .
            
            - run:
                name: copy web
                command: cp -r /tmp/workspace/web .

            - run:
                name: dependencies
                command: ./.circleci/set-up-globals.sh
            - run:
                name: check for WordPress coding standards
                command: ./.circleci/code-sniff.sh

    behat_test:
        <<: *defaults
        steps:
            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp/workspace

            - checkout

            - run:
                name: copy vendor
                command: cp -r /tmp/workspace/vendor .
            
            - run:
                name: copy web
                command: cp -r /tmp/workspace/web .
            
            - run:
                name: dependencies
                command: ./.circleci/set-up-globals.sh
            - run:
                name: run Behat tests
                command: ./.circleci/behat-test.sh

    unit_test:
        <<: *defaults
        steps:
            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp/workspace

            - checkout

            - run:
                name: copy vendor
                command: cp -r /tmp/workspace/vendor .
            
            - run:
                name: copy web
                command: cp -r /tmp/workspace/web .

            - run:
                name: dependencies
                command: ./.circleci/set-up-globals.sh
            - run:
                name: run unit tests
                command: ./.circleci/unit-test.sh

    deploy_to_pantheon:
        <<: *defaults
        steps:
            - attach_workspace:
                # Must be absolute path or relative path from working_directory
                at: /tmp/workspace

            - checkout

            - run:
                name: copy vendor
                command: cp -r /tmp/workspace/vendor .
            
            - run:
                name: copy web
                command: cp -r /tmp/workspace/web .

            - run:
                name: dependencies
                command: ./.circleci/set-up-globals.sh
            - run:
                name: deploy to Pantheon
                command: ./.circleci/deploy-to-pantheon.sh
            - run:
                name: set secrets on Pantheon
                command: terminus secrets:set -n "$TERMINUS_SITE.$TERMINUS_ENV" token "$GITHUB_TOKEN" --file='github-secrets.json' --clear --skip-if-empty

    # @todo: anything to do once everything is complete?
    completion:
        <<: *defaults
        steps:
            - run:
                name: cleanup
                command: echo "Congrats, all tests passed!"

workflows:
  version: 2
  build_test:
    jobs:
      # Build the site first
      - build
      # Run code sniffing and unit testing
      - code_sniff:
          requires:
            - build
      - unit_test:
          requires:
            - build
      # Deploy to Pantheon if initial tests pass
      - deploy_to_pantheon:
          requires:
            - code_sniff
            - unit_test
      # Run Behat tests after deploy so they can be done on Pantheon
      - behat_test:
          requires:
            - deploy_to_pantheon
      # Completion requires all tests to pass
      - completion:
          requires:
            - code_sniff
            - unit_test
            - behat_test
